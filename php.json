{
  "doc_api": {
    "prefix": "doc_api",
    "body": [
      "/**",
      " * @api {${1:get}} ${2:/api/1.0/}",
      " * @apiName ${3:get}",
      " * @apiGroup ${4:group}",
      " *",
      " * @apiSuccess ${5:{String}} ${6:ok} ${7:Status of response.}",
      " */"
    ],
    "description": "doc_api"
  },
  "TestCase": {
    "prefix": "TestCase",
    "body": [
      "use PHPUnit\\Framework\\TestCase;",
      "",
      "/**",
      " * ${3:Test description.}",
      " *",
      " * @author `g:snips_author`",
      " * @since `strftime('%d %B, %Y')`",
      " */",
      "class ${1:Testname} extends TestCase{",
      "  /**",
      "   * Before all test run.",
      "   */",
      "  public static function setUpBeforeClass(){",
      "\t  ",
      "  }",
      "",
      "  /**",
      "   * After all test run.",
      "   */",
      "  public static function tearDownAfterClass(){",
      "\t  ",
      "\t}",
      "",
      "  /**",
      "   * Before each test runs.",
      "   */",
      "  public function setUp(){",
      "    ",
      "  }",
      "",
      "  /**",
      "   * After each test runs.",
      "   */",
      "  public function tearDown(){",
      "    ",
      "  }",
      "",
      "  public function test${2:FirstTest}(){",
      "",
      "  }",
      "}"
    ],
    "description": "TestCase"
  },
  "api": {
    "prefix": "api",
    "body": [
      "require '${5:../vendor/autoload.php}';",
      "",
      "$app = new \\Slim\\App;",
      "",
      "/**",
      " * @api {post} $1/$2/$3 Create new $3.",
      " * @apiName Create${4:upper_case_name}",
      " * @apiGroup $4",
      " * @apiVersion $2.0",
      " *",
      " * @apiParam",
      " * ",
      " * @apiSuccess {String} ok Status of response.",
      " * @apiSuccess {Object[]} ok Newly created $3.",
      " */",
      "$app->post('${1:/api}/${2:1.0}/${3:lower_case_name}', '$4Router:create');",
      "",
      "/**",
      " * @api {get} $1/$2/$3 Get filtered $3.",
      " * @apiName GetFiltered$4",
      " * @apiGroup $4",
      " * @apiVersion $2.0",
      " * ",
      " * @apiSuccess {String} ok Status of response.",
      " * @apiSuccess {Object[]} data Retrieve filtered $3s.",
      " */",
      "$app->get('$1/$2/$3', '$4Router:read');",
      "",
      "/**",
      " * @api {get} $1/$2/$3/:$3Id Get $3 by ID.",
      " * @apiName Get$4ById",
      " * @apiGroup $4",
      " * @apiVersion $2.0",
      " *",
      " * @apiParam {Number} $3Id Unique $3 ID.",
      " * ",
      " * @apiSuccess {String} ok Status of response.",
      " * @apiSuccess {Object[]} data $4 selected by ID.",
      " */",
      "$app->get('$1$2/$3/{$3Id}', '$4Router:readOne');",
      "",
      "/**",
      " * @api {put} $1/$2/$3/:$3Id Update $3 by ID.",
      " * @apiName Update$4",
      " * @apiGroup $4",
      " * @apiVersion $2.0",
      " *",
      " * @apiParam {Number} $3Id Unique $3 ID.",
      " * ",
      " * @apiSuccess {String} ok Status of response.",
      " * @apiSuccess {Object[]} data Updated $3.",
      " */",
      "$app->put('$1$2/$3/$3Id', '$4Router:update');",
      "",
      "/**",
      " * @api {delete} $1/$2/$3 Delete all $3s.",
      " * @apiName DeleteAll$4",
      " * @apiGroup $4",
      " * @apiVersion $2.0",
      " *",
      " * @apiSuccess {String} ok Status of response.",
      " * @apiSuccess {Object[]} data Empty object.",
      " */",
      "$app->delete('$1/$2/$3', '$4Router:delete');",
      "",
      "/**",
      " * @api {delete} $1/$2/$3/:$3Id Delete $3 by ID.",
      " * @apiName Delete$4ById",
      " * @apiGroup $4",
      " * @apiVersion $2.0",
      " *",
      " * @apiParam {Number} testId Unique $3 ID.",
      " *",
      " * @apiSuccess {String} ok Status of response.",
      " * @apiSuccess {Object[]} data Empty object.",
      " */",
      "$app->delete('$1/$2/$3/$3Id', '$4Router:deleteAll');"
    ],
    "description": "api"
  },
  "api_function": {
    "prefix": "api_function",
    "body": [
      "public function ${1:function_name}($request, $response, $args){",
      "\t${2}",
      "}"
    ],
    "description": "api_function"
  },
  "api_params": {
    "prefix": "api_params",
    "body": [
      "$params = $request->getParams();"
    ],
    "description": "api_params"
  },
  "slim_model": {
    "prefix": "slim_model",
    "body": [
      "class Model_${1:model_name} extends RedBean_SimpleModel{",
      "  ${2:// TODO implement model}",
      "}"
    ],
    "description": "slim_model"
  },
  "getset": {
    "prefix": "getset",
    "body": [
      "function get${1:upper_property_name}(){",
      "\treturn $this->${2:lower_property_name};",
      "}",
      "",
      "function set$1($new$1){",
      "\t$this->$2 = $new$1;",
      "}"
    ],
    "description": "getset"
  },
  "fluent": {
    "prefix": "fluent",
    "body": [
      "function with${1:upper_property_name}($new$1){",
      "\t$this->${2:lower_property_name} = $new$1;",
      "\treturn $this;",
      "}"
    ],
    "description": "fluent"
  },
  "getsetfluent": {
    "prefix": "getsetfluent",
    "body": [
      "/**",
      " * Accessor method for retreiving $1.",
      " *",
      " * @return $1.",
      " */",
      "function get${1:upper_property_name}(){",
      "\treturn $this->${2:lower_property_name};",
      "}",
      "",
      "/**",
      " * Accessor method for setting $1.",
      " *",
      " * @param $new$1 $1 to be set to this ${3:object}.",
      " */",
      "function set$1($new$1){",
      "\t$this->$2 = $new$1;",
      "}",
      "",
      "/**",
      " * Fluent API method for setting $1.",
      " *",
      " * @param $new$1 $1 to be set to this $3.",
      " * @return $1.",
      " */",
      "function with$1($new$1){",
      "\t$this->$2 = $new$1;",
      "\treturn $this;",
      "}",
      ""
    ],
    "description": "getsetfluent"
  }
}